---
- name: Check for programs - podman
  ansible.builtin.shell: "which podman"
  register: program_check_podman
  ignore_errors: true
  
- name: Install podman if not present
  when: program_check_podman.rc != 0
  ansible.builtin.yum:
    name:
      - podman
    state: present
    
- name: Configure auto registration 
  block:
  - name: Login to registry.redhat.io
    containers.podman.podman_login:
      username: "{{ rhsm_username }}"
      password: '{{ rhsm_password }}'
      registry: registry.redhat.io
    tags:
      - rh_reg_login

  - name: Check if iso download directory exists
    stat:
      path: "{{ iso_download_directory }}"
    register: download_dir_exists

  - name: Check for  iso download directory
    debug:
      msg: "The {{ iso_download_directory }} exists"
    when: download_dir_exists.stat.exists

  - name: Creates directory
    file:
      path: "{{ iso_download_directory }}"
      state: directory
      mode: '0777'
    when: download_dir_exists.stat.exists == false

  - name: Setting permissions on data folder
    ansible.builtin.command:  setfacl -m u:26:-wx {{ iso_download_directory }}
    become: yes
    become_user: root

  - name: Check if iso exists
    stat:
      path: "{{ iso_download_directory }}/{{ image_name  }}.iso"
    register: check_if_iso_exists

  - name: Does the iso exisit
    debug:
      msg: "The iso exists"
    when: check_if_iso_exists.stat.exists

  - name: fail when iso does not exist
    fail: 
      msg: "{{ iso_download_directory }}/{{ image_name  }}.iso does not exist"
    when: check_if_iso_exists.stat.exists == false

  - name: Copy fleet source iso
    copy:
      src: "{{ iso_download_directory }}/{{ image_name }}.iso"
      dest: "{{ workspace }}/fleet_source.iso"
      remote_src: yes

  - name: Setting host facts using complex arguments
    ansible.builtin.set_fact:
      random_hostname:  "{{ lookup('community.general.random_string', length=5, upper=false, numbers=false, special=false) }}"
      
  - name:  Populating fleet_rhc_vars
    copy:
      dest: "{{ workspace }}/fleet_rhc_vars"
      content: |
        RHC_ORGID={{ rhc_org_id }}
        RHC_ACTIVATION_KEY={{ rhc_activation_key }}
        RHC_FIRSTBOOT=true
        INSIGHTS_DISPLAY_NAME="{{ image_name }}-{{ random_hostname }}"

  - name: Download kickstart
    get_url:
      url: "{{ default_kickstart_url }}"
      dest: "{{ workspace }}/{{ kickstart_file }}"
    when: enable_kickstart == true

  - name: Replace hostname
    ansible.builtin.replace:
      path: "{{ workspace }}/{{ kickstart_file }}"
      regexp: '(CHANGE_HOSTNAME)'
      replace: "{{ image_name }}-{{ random_hostname }}"
    when: enable_kickstart == true

  - name: Replace username
    ansible.builtin.replace:
      path: "{{ workspace }}/{{ kickstart_file }}"
      regexp: '(CHANGE_USERNAME)'
      replace: "{{ username }}"
    when: enable_kickstart == true

  - name: Replace ssh
    ansible.builtin.replace:
      path: "{{ workspace }}/{{ kickstart_file }}"
      regexp: '(CHANGE_SSH)'
      replace: "{{ ssh_pub_key }}"
    when: enable_kickstart == true

  - name: Replace username
    ansible.builtin.replace:
      path: "{{ workspace }}/{{ kickstart_file }}"
      regexp: '(CHANGE_RHEL_USERNAME)'
      replace: "{{ rhsm_username }}"
    when: enable_kickstart == true

  - name: Replace password
    ansible.builtin.replace:
      path: "{{ workspace }}/{{ kickstart_file }}"
      regexp: '(CHANGE_PASSWORD)'
      replace: "{{ rhsm_password }}"
    when: enable_kickstart == true

  - name: Replace pull secret
    ansible.builtin.replace:
      path: "{{ workspace }}/{{ kickstart_file }}"
      regexp: '(CHANGE_PULLSECRET)'
      replace: "{{ pull_secret }}"
    when: microshift_kickstart == true

  - name: Copy file with new name
    ansible.builtin.copy:
      remote_src: true
      src: "{{ workspace }}/{{ kickstart_file }}"
      dest: "{{ workspace }}/template.ks"
    when: enable_kickstart == true

  - name: Run fleet-management container 
    containers.podman.podman_container:
      name: fleet-iso-util-1
      image: quay.io/fleet-management/fleet-iso-util:latest
      state: started
      interactive: yes
      rm: yes
      volume:
        -  "{{ workspace }}/:/isodir:Z"
      detach: no
      user: "{{ podman_user | default(omit) }}"
      subgidname: "{{ podman_subgidname | default(omit) }}"
      subuidname: "{{ podman_subuidname | default(omit) }}"
      security_opt: "{{ podman_security_opt | default(omit) }}"
      privileged: "{{ podman_privileged | default(omit) }}"
      device: "{{ podman_device | default(omit) }}"
      label: "{{ podman_label | default(omit) }}"
      cap_add: "{{ podman_cap_add | default(omit) }}"
    when: enable_kickstart == false
    
  - name: Run fleet-management container using kickstart
    containers.podman.podman_container:
      name: fleet-iso-util-1
      image: quay.io/fleet-management/fleet-iso-util:latest
      command:  /usr/local/bin/fleetkick.sh -k template.ks
      state: started
      interactive: yes
      rm: yes
      volume:
        -  "{{ workspace }}/:/isodir:Z"
      detach: no
      user: "{{ podman_user | default(omit) }}"
      subgidname: "{{ podman_subgidname | default(omit) }}"
      subuidname: "{{ podman_subuidname | default(omit) }}"
      security_opt: "{{ podman_security_opt | default(omit) }}"
      privileged: "{{ podman_privileged | default(omit) }}"
      device: "{{ podman_device | default(omit) }}"
      label: "{{ podman_label | default(omit) }}"
      cap_add: "{{ podman_cap_add | default(omit) }}"
    when: enable_kickstart == true

  - name: Copy fleet source iso
    copy:
      src: "{{ workspace }}/fleet_out.iso"
      dest: "{{ iso_download_directory }}/{{ image_name }}_fleet_out.iso"
      remote_src: yes

  - name: Remove fleet source iso 
    ansible.builtin.file:
      path: "{{ workspace }}/fleet_source.iso"
      state: absent
    when: clean_kickstart == true

  - name: Remove fleet out iso
    ansible.builtin.file:
      path: "{{ workspace }}/fleet_out.iso"
      state: absent
    when: clean_kickstart == true

  - name: Remove fleet_rhc_vars
    ansible.builtin.file:
      path: "{{ workspace }}/fleet_rhc_vars"
      state: absent
    when: clean_kickstart == true

  - name: Remove template.ks
    ansible.builtin.file:
      path: "{{ workspace }}/template.ks"
      state: absent
    when: clean_kickstart == true

  - name: Recursively workspace directory
    ansible.builtin.file:
      path: "{{ workspace }}"
      state: absent
    when: remove_workspace == true
  tags:
  - configure_auto_registration
